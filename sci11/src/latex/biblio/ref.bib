@article{ZuckPFGH02,
  author    = {Lenore D. Zuck and
               Amir Pnueli and
               Yi Fang and
               Benjamin Goldberg and
               Ying Hu},
  title     = {Translation and Run-Time Validation of Optimized Code},
  journal   = {Electr. Notes Theor. Comput. Sci.},
  volume    = {70},
  number    = {4},
  year      = {2002},
  pages     = {179-200},
  ee        = {http://dx.doi.org/10.1016/S1571-0661(04)80584-X},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@article{Bacon,
 author = {Bacon, David F. and Graham, Susan L. and Sharp, Oliver J.},
 title = {Compiler transformations for high-performance computing},
 journal = {ACM Comput. Surv.},
 issue_date = {Dec. 1994},
 volume = {26},
 number = {4},
 year = {1994},
 issn = {0360-0300},
 pages = {345--420},
 numpages = {76},
 acmid = {197406},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {compilation, dependence analysis, locality, multiprocessors, optimization, parallelism, superscalar processors, vectorization}
}

@INPROCEEDINGS{Nec00,
    author = {George C. Necula},
    title = {Translation Validation for an Optimizing Compiler},
    booktitle = {},
    year = {2000},
    pages = {83--95}
}

@INPROCEEDINGS{PSS98a,
    author = {A. Pnueli and M. Siegel and F. Singerman},
    title = {Translation Validation},
    booktitle = {},
    year = {1998},
    pages = {151--166},
    publisher = {Springer}
}

@techreport{RM00,
 author = {Rinard, M.},
 title = {Credible Compilers},
 year = {1999},
 source = {http://www.ncstrl.org:8900/ncstrl/servlet/search?formname=detail\&id=oai%3Ancstrlh%3Amitai%3AMIT-LCS%2F%2FMIT%2FLCS%2FTR-776},
 publisher = {Massachusetts Institute of Technology},
 address = {Cambridge, MA, USA},
 numpages = {20}
} 

@Article{ZPFG02,
  author =     "Lenore Zuck and Amir Pnueli and Yi Fang and Benjamin Goldberg",
  title =      "VOC: A Methodology for the Translation Validation of Optimizing Compilers",
  abstract =   "There is a growing awareness, both in industry and academia, of the crucial role of formally verifying the translation from high-level source-code into low-level object code that is typically performed by an optimizing compiler. Formally verifying an optimizing compiler, as one would verify any other large program, is not feasible due to its size, ongoing evolution and modification, and, possibly, proprietary considerations. Translation validation is a novel approach that offers an alternative to the verification of translators in general and compilers in particular: Rather than verifying the compiler itself, one constructs a validation tool which, after every run of the compiler, formally confirms that the target code produced in the run is a correct translation of the source program. The paper presents voc, a methodology for the translation validation of optimizing compilers. We distinguish between structure preserving optimizations, for which we establish a simulation relation between the source and target code based on computational induction, and structure modifying optimizations, for which we develop specialized permutation rules. The paper also describes voc-64 - a prototype translation validator tool that automatically produces verification conditions for the global optimizations of the SGI Pro-64 compiler.",
  journal =    "j-jucs",
  year =       "2003",
  volume =     "9",
  number =     "3",
  pages =      "223--247",
  date =       "2003-03-28",
}

@INPROCEEDINGS{PSS98b,
    author = {A. Pnueli and M. Siegel and F. Singerman},
    title = {Translation Validation},
    booktitle = {},
    year = {1998},
    pages = {151--166},
    publisher = {Springer}
}

@INPROCEEDINGS{PRSS99,
    author = {Amir Pnueli and Yoav Rodeh and Ofer Shtrichman and Michael Siegel},
    title = {Deciding Equality Formulas by Small Domains Instantiations},
    booktitle = {Computer-Aided Verification},
    year = {1999},
    pages = {455--469},
    publisher = {Springer-Verlag}
}

@book{AK02,
 author = {Kennedy, Ken and Allen, John R.},
 title = {Optimizing compilers for modern architectures: a dependence-based approach},
 year = {2002},
 publisher = {Morgan Kaufmann Publishers Inc.},
 address = {San Francisco, CA, USA},
 numpages = {790}
} 

@book{SOR93,
    address = {Menlo Park, CA},
    author = {Shankar, N. and Owre, S. and Rushby, J. M.},
    citeulike-article-id = {2765566},
    comment = {A new edition for PVS Version 2 is expected in 1998},
    keywords = {rcb-bibfile},
    organization = {Computer Science Laboratory, SRI International},
    posted-at = {2008-05-07 12:57:50},
    priority = {2},
    title = {The {PVS} Proof Checker: {A} Reference Manual},
    year = {1993},
    numpages = {63}
}

@techreport{ZPL00,
 author = {Zuck, L. and Pnueli, A. and Leviathan, R.},
 title = {Validation of Optimizing Compilers},
 year = {2001},
 publisher = {Weizmann Science Press of Israel},
 numpages= {13},
 address = {Jerusalem, Israel},
} 

@inproceedings{GHCP02,
 author = {Goldberg, Benjamin and Crutcher, Emily and Huneycutt, Chad and Palem, Krishna V.},
 title = {Software Bubbles: Using Predication to Compensate for Aliasing in Software Pipelines},
 booktitle = {Proceedings of the 2002 International Conference on Parallel Architectures and Compilation Techniques},
 series = {PACT '02},
 year = {2002},
 isbn = {0-7695-1620-3},
 pages = {211--221},
 numpages = {11},
 acmid = {674330},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 